ESP32 Arduino Sketch
cpp
CopyEdit
#include <WiFi.h>
#include <PubSubClient.h>

// WiFi creds
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// MQTT broker info (Node-RED runs MQTT broker or external)
const char* mqtt_server = "YOUR_MQTT_BROKER_IP";
const int mqtt_port = 1883;
const char* mqtt_user = "mqtt_user";        // if auth enabled
const char* mqtt_pass = "mqtt_pass";        // if auth enabled

WiFiClient espClient;
PubSubClient client(espClient);

#define CURRENT_SENSOR_PIN 34   // ADC pin for SCT-013
#define RELAY_PIN 25            // GPIO controlling overload relay

// Calibration constant depends on SCT-013 variant
const float calibration_factor = 30.0; // Adjust this for your sensor

unsigned long lastMsg = 0;
const long interval = 2000; // send data every 2 seconds

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  // listen for relay ON/OFF commands from Node-RED
  String msg = "";
  for (unsigned int i = 0; i < length; i++) {
    msg += (char)payload[i];
  }
  Serial.print("Message arrived: ");
  Serial.println(msg);

  if (String(topic) == "plant/machine1/relay") {
    if (msg == "ON") {
      digitalWrite(RELAY_PIN, HIGH);
      Serial.println("Relay turned ON");
    } else if (msg == "OFF") {
      digitalWrite(RELAY_PIN, LOW);
      Serial.println("Relay turned OFF");
    }
  }
}

float readCurrent() {
  const int sampleCount = 1000;
  long sumSQ = 0;
  
  for (int i = 0; i < sampleCount; i++) {
    int raw = analogRead(CURRENT_SENSOR_PIN);
    int val = raw - 2048; // assuming 12-bit ADC (0-4095), mid is 2048
    sumSQ += (long)val * val;
  }
  
  float rms = sqrt(sumSQ / (float)sampleCount);
  // convert rms ADC value to current (amps)
  float current = (rms / 2048.0) * calibration_factor;
  return current;
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client", mqtt_user, mqtt_pass)) {
      Serial.println("connected");
      client.subscribe("plant/machine1/relay");  // subscribe for relay control
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 sec");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);

  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > interval) {
    lastMsg = now;

    float current = readCurrent();
    Serial.print("Current: ");
    Serial.print(current);
    Serial.println(" A");

    // Publish current value to MQTT topic
    char payload[50];
    snprintf(payload, sizeof(payload), "%.2f", current);
    client.publish("plant/machine1/current", payload);
  }
}


Grafana Dashboard JSON (Sample)
json
CopyEdit
{
  "dashboard": {
    "id": null,
    "title": "Industrial Machine Energy Consumption",
    "tags": ["industrial", "energy", "IoT"],
    "timezone": "browser",
    "schemaVersion": 37,
    "version": 1,
    "refresh": "10s",
    "panels": [
      {
        "type": "timeseries",
        "title": "Machine Current (Amps)",
        "datasource": "InfluxDB",  
        "targets": [
          {
            "query": "from(bucket: \"machine_energy\") |> range(start: -1h) |> filter(fn: (r) => r._measurement == \"current\") |> aggregateWindow(every: 10s, fn: mean, createEmpty: false) |> yield(name: \"mean\")",
            "refId": "A"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "amp",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                { "color": "green", "value": null },
                { "color": "red", "value": 15 }
              ]
            },
            "mappings": [],
            "min": 0
          },
          "overrides": []
        },
        "options": {
          "legend": {
            "displayMode": "list",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "single"
          },
          "thresholds": {
            "mode": "absolute",
            "steps": [
              { "color": "green", "value": null },
              { "color": "red", "value": 15 }
            ]
          }
        },
        "alert": {
          "alertRuleTags": {},
          "conditions": [
            {
              "evaluator": { "params": [15], "type": "gt" },
              "operator": { "type": "and" },
              "query": { "params": ["A"] },
              "reducer": { "params": [], "type": "avg" },
              "type": "query"
            }
          ],
          "executionErrorState": "alerting",
          "for": "1m",
          "frequency": "30s",
          "handler": 1,
          "name": "Overload Alert",
          "noDataState": "no_data",
          "notifications": []
        },
        "gridPos": { "h": 10, "w": 24, "x": 0, "y": 0 },
        "id": 1
      }
    ]
  },
  "overwrite": true
}



Node-RED Flow JSON:
json
CopyEdit
[
  {
    "id": "mqtt_in_current",
    "type": "mqtt in",
    "z": "flow1",
    "name": "Subscribe Machine Current",
    "topic": "factory/machine/current",
    "qos": "1",
    "datatype": "auto",
    "broker": "mqtt_broker",
    "x": 160,
    "y": 100,
    "wires": [["function_check_threshold"]]
  },
  {
    "id": "function_check_threshold",
    "type": "function",
    "z": "flow1",
    "name": "Check Overload Threshold",
    "func": "const current = parseFloat(msg.payload);\nconst threshold = 15;\n\nif (current > threshold) {\n    msg.payload = { command: \"cut_off\" };\n    return [msg, null];  // Relay ON, no alert\n} else {\n    msg.payload = { command: \"normal\" };\n    return [null, msg];  // Relay OFF, no alert\n}",
    "outputs": 2,
    "noerr": 0,
    "x": 400,
    "y": 100,
    "wires": [["mqtt_out_relay"], ["mqtt_out_relay"]]
  },
  {
    "id": "mqtt_out_relay",
    "type": "mqtt out",
    "z": "flow1",
    "name": "Relay Control MQTT",
    "topic": "factory/machine/relay",
    "qos": "1",
    "retain": "false",
    "broker": "mqtt_broker",
    "x": 620,
    "y": 100,
    "wires": []
  }
]

