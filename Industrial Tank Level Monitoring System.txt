Setup:
1.	Create a Blynk project
2.	Add:
o	Value Display (V1): Water Level %
o	LED Widget (V2): Leak Alert
o	Button Widget (V3): Manual Pump Control (Relay)
3.	Get Auth Token from Blynk email
________________________________________
Arduino Code:
cpp
CopyEdit
#define BLYNK_PRINT Serial

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// Blynk Auth Token
char auth[] = "YOUR_BLYNK_AUTH_TOKEN";

// WiFi credentials
char ssid[] = "YOUR_SSID";
char pass[] = "YOUR_PASSWORD";

// Pin Definitions
#define TRIG_PIN D5
#define ECHO_PIN D6
#define PRESSURE_PIN A0
#define RELAY_PIN D7

// Tank dimensions (cm)
const float tankHeight = 150.0; // Adjust per your tank

BlynkTimer timer;

void setup() {
  Serial.begin(115200);
  Blynk.begin(auth, ssid, pass);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  timer.setInterval(5000L, readSensors);
}

void readSensors() {
  // HC-SR04 Distance Measurement
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  float distance = duration * 0.034 / 2;

  // Convert distance to percentage
  float level = ((tankHeight - distance) / tankHeight) * 100;
  if (level < 0) level = 0;
  if (level > 100) level = 100;

  // Pressure Sensor reading (0‚Äì1023 ADC)
  int pressureVal = analogRead(PRESSURE_PIN);
  float pressureVolt = pressureVal * (3.3 / 1023.0);
  
  // Leak Detection (Simple Threshold Logic)
  bool leakDetected = pressureVolt < 0.3 && level > 20;  // If level is high but pressure is low

  // Push to Blynk
  Blynk.virtualWrite(V1, level); // Tank level
  Blynk.virtualWrite(V2, leakDetected ? 255 : 0); // LED ON if leak

  // Automatic pump control logic
  if (level < 20) {
    digitalWrite(RELAY_PIN, HIGH); // Start motor
  } else if (level > 95) {
    digitalWrite(RELAY_PIN, LOW); // Stop motor
  }

  Serial.print("Level: "); Serial.print(level); Serial.print("%");
  Serial.print(" | Pressure: "); Serial.println(pressureVolt);
}

BLYNK_WRITE(V3) { // Manual relay control from app
  int pinValue = param.asInt();
  digitalWrite(RELAY_PIN, pinValue);
}

void loop() {
  Blynk.run();
  timer.run();
}


Here‚Äôs the complete Firebase integration firmware code for the üõ¢Ô∏è Industrial Tank Level Monitoring System using ESP8266:
cpp
CopyEdit
#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>

#define FIREBASE_HOST "your-project-id.firebaseio.com"  // Replace with your Firebase host
#define FIREBASE_AUTH "your-database-secret"            // Replace with your Firebase database secret

char ssid[] = "YOUR_WIFI_SSID";                         // Replace with your WiFi SSID
char password[] = "YOUR_WIFI_PASSWORD";                 // Replace with your WiFi Password

FirebaseData firebaseData;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println(" connected");
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);
}

void loop() {
  float waterLevel = 70.5; // Replace with actual sensor reading from HC-SR04
  float pressure = 1.2;    // Replace with actual pressure sensor reading
  long timestamp = millis();

  if (Firebase.setFloat(firebaseData, "/tank/level", waterLevel)) {
    Serial.println("Level uploaded");
  }
  if (Firebase.setFloat(firebaseData, "/tank/pressure", pressure)) {
    Serial.println("Pressure uploaded");
  }
  if (Firebase.setInt(firebaseData, "/tank/timestamp", timestamp)) {
    Serial.println("Timestamp uploaded");
  }

  delay(5000); // Log every 5 seconds
}

Make sure you install the FirebaseESP8266 library and replace placeholders (YOUR_WIFI_SSID, FIREBASE_HOST, etc.) with your actual credentials.
